<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/gimnasiouq/gimnasiouq/viewcontroller/AdministradorUsuariosViewController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/gimnasiouq/gimnasiouq/viewcontroller/AdministradorUsuariosViewController.java" />
              <option name="originalContent" value="package gimnasiouq.gimnasiouq.viewcontroller;&#10;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;import gimnasiouq.gimnasiouq.factory.ModelFactory;&#10;import gimnasiouq.gimnasiouq.mapping.dto.UsuarioDto;&#10;import gimnasiouq.gimnasiouq.model.Usuario;&#10;import gimnasiouq.gimnasiouq.controller.UsuarioController;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;public class AdministradorUsuariosViewController {&#10;&#10;    AdministradorViewController administradorViewController;&#10;    ObservableList&lt;Usuario&gt; listaUsuarios = FXCollections.observableArrayList();&#10;    Usuario usuarioSeleccionado;&#10;&#10;    // Controller que delega la lógica de negocio&#10;    private UsuarioController usuarioController;&#10;&#10;    @FXML&#10;    private ResourceBundle resources;&#10;&#10;    @FXML&#10;    private URL location;&#10;&#10;    @FXML&#10;    private Button btnActualizar;&#10;&#10;    @FXML&#10;    private Button btnAgregar;&#10;&#10;    @FXML&#10;    private Button btnEliminar;&#10;&#10;    @FXML&#10;    private Button btnNuevo;&#10;&#10;    @FXML&#10;    private TableView&lt;Usuario&gt; tableUsuario;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcCelular;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcEdad;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcIdentificacion;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcMembresia;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcNombre;&#10;&#10;    @FXML&#10;    private TextField txtCelular;&#10;&#10;    @FXML&#10;    private TextField txtEdad;&#10;&#10;    @FXML&#10;    private TextField txtIdentificacion;&#10;&#10;    @FXML&#10;    private ComboBox&lt;String&gt; comboBoxMembresia;&#10;&#10;    @FXML&#10;    private TextField txtNombre;&#10;&#10;    @FXML&#10;    void onActualizar(ActionEvent event) {&#10;        actualizarUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void onAgregar(ActionEvent event) {&#10;        agregarUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void onEliminar(ActionEvent event) {&#10;        eliminarUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void onNuevo(ActionEvent event) {&#10;        nuevoUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void initialize() {&#10;        initView();&#10;        comboBoxMembresia.getItems().addAll(&quot;Basica&quot;, &quot;Premium&quot;, &quot;VIP&quot;);&#10;    }&#10;&#10;    private void initView() {&#10;        initDataBinding();&#10;        obtenerUsuarios();&#10;        tableUsuario.getItems().clear();&#10;        tableUsuario.setItems(listaUsuarios);&#10;        listenerSelection();&#10;    }&#10;&#10;    private void obtenerUsuarios() {&#10;        listaUsuarios.clear();&#10;        listaUsuarios.addAll(ModelFactory.getInstance().obtenerUsuarios());&#10;    }&#10;&#10;    private void initDataBinding() {&#10;        tcNombre.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombre()));&#10;        tcIdentificacion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getIdentificacion()));&#10;        tcEdad.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEdad()));&#10;        tcCelular.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getCelular()));&#10;        tcMembresia.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMembresia()));&#10;    }&#10;&#10;    private void listenerSelection() {&#10;        tableUsuario.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newSelection) -&gt; {&#10;            usuarioSeleccionado = newSelection;&#10;            mostrarInformacionUsuario(usuarioSeleccionado);&#10;        });&#10;    }&#10;&#10;    private void nuevoUsuario() {&#10;        limpiarCampos();&#10;        usuarioSeleccionado = null;&#10;        tableUsuario.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    private void agregarUsuario() {&#10;        UsuarioDto usuarioDto = crearUsuarioDto();&#10;&#10;        if (datosValidos(usuarioDto)) {&#10;            if (usuarioController == null) {&#10;                usuarioController = new UsuarioController();&#10;            }&#10;&#10;            if (usuarioController.agregarUsuario(usuarioDto)) {&#10;                // Agregamos el nuevo usuario a la lista observable&#10;                listaUsuarios.add(new Usuario(&#10;                        usuarioDto.nombre(),&#10;                        usuarioDto.identificacion(),&#10;                        usuarioDto.edad(),&#10;                        usuarioDto.celular(),&#10;                        usuarioDto.membresia()&#10;                ));&#10;&#10;                limpiarCampos();&#10;&#10;                // Notificar al controlador padre para que actualice otras vistas&#10;                if (administradorViewController != null) {&#10;                    administradorViewController.notificarActualizacion();&#10;                }&#10;&#10;                mostrarVentanaEmergente(&quot;Usuario agregado&quot;, &quot;Éxito&quot;,&#10;                        &quot;El usuario se agregó correctamente&quot;, Alert.AlertType.INFORMATION);&#10;            } else {&#10;                mostrarVentanaEmergente(&quot;Usuario no agregado&quot;, &quot;Error&quot;,&#10;                        &quot;El usuario ya existe o los datos son inválidos&quot;, Alert.AlertType.ERROR);&#10;            }&#10;        } else {&#10;            mostrarVentanaEmergente(&quot;Datos incompletos&quot;, &quot;Error&quot;,&#10;                    &quot;Por favor complete todos los campos&quot;, Alert.AlertType.ERROR);&#10;        }&#10;    }&#10;&#10;    private void actualizarUsuario() {&#10;        if (usuarioSeleccionado != null) {&#10;            UsuarioDto usuarioActualizado = crearUsuarioDto();&#10;&#10;            if (datosValidos(usuarioActualizado)) {&#10;                // Usamos la identificación del usuario seleccionado como clave&#10;                if (usuarioController == null) {&#10;                    usuarioController = new UsuarioController();&#10;                }&#10;&#10;                if (usuarioController.actualizarUsuario(usuarioSeleccionado.getIdentificacion(), usuarioActualizado)) {&#10;&#10;                    // Actualizamos la lista observable: reemplazamos el objeto Usuario en la lista&#10;                    int index = listaUsuarios.indexOf(usuarioSeleccionado);&#10;                    if (index &gt;= 0) {&#10;                        listaUsuarios.set(index, new Usuario(&#10;                                usuarioActualizado.nombre(),&#10;                                usuarioActualizado.identificacion(),&#10;                                usuarioActualizado.edad(),&#10;                                usuarioActualizado.celular(),&#10;                                usuarioActualizado.membresia()&#10;                        ));&#10;                    }&#10;&#10;                    tableUsuario.refresh();&#10;                    limpiarCampos();&#10;                    mostrarVentanaEmergente(&quot;Usuario actualizado&quot;, &quot;Éxito&quot;,&#10;                            &quot;El usuario se actualizó correctamente&quot;, Alert.AlertType.INFORMATION);&#10;                } else {&#10;                    mostrarVentanaEmergente(&quot;Usuario no actualizado&quot;, &quot;Error&quot;,&#10;                            &quot;No se pudo actualizar el usuario. Verifique que la nueva identificación no exista&quot;,&#10;                            Alert.AlertType.ERROR);&#10;                }&#10;            } else {&#10;                mostrarVentanaEmergente(&quot;Datos incompletos&quot;, &quot;Error&quot;,&#10;                        &quot;Por favor complete todos los campos&quot;, Alert.AlertType.ERROR);&#10;            }&#10;        } else {&#10;            mostrarVentanaEmergente(&quot;Seleccione un usuario&quot;, &quot;Advertencia&quot;,&#10;                    &quot;Debe seleccionar un usuario de la tabla para actualizarlo&quot;, Alert.AlertType.WARNING);&#10;        }&#10;    }&#10;&#10;    private void eliminarUsuario() {&#10;        if (usuarioSeleccionado != null) {&#10;            // Confirmación antes de eliminar&#10;            Alert confirmacion = new Alert(Alert.AlertType.CONFIRMATION);&#10;            confirmacion.setTitle(&quot;Confirmar eliminación&quot;);&#10;            confirmacion.setHeaderText(&quot;¿Está seguro?&quot;);&#10;            confirmacion.setContentText(&quot;¿Desea eliminar al usuario &quot; +&#10;                    usuarioSeleccionado.getNombre() + &quot; con identificación &quot; +&#10;                    usuarioSeleccionado.getIdentificacion() + &quot;?&quot;);&#10;&#10;            confirmacion.showAndWait().ifPresent(response -&gt; {&#10;                if (response == ButtonType.OK) {&#10;                    if (usuarioController == null) {&#10;                        usuarioController = new UsuarioController();&#10;                    }&#10;&#10;                    if (usuarioController.eliminarUsuario(usuarioSeleccionado.getIdentificacion())) {&#10;                        listaUsuarios.remove(usuarioSeleccionado);&#10;                        limpiarCampos();&#10;                        usuarioSeleccionado = null;&#10;                        mostrarVentanaEmergente(&quot;Usuario eliminado&quot;, &quot;Éxito&quot;,&#10;                                &quot;El usuario se eliminó correctamente&quot;, Alert.AlertType.INFORMATION);&#10;                    } else {&#10;                        mostrarVentanaEmergente(&quot;Usuario no eliminado&quot;, &quot;Error&quot;,&#10;                                &quot;No se pudo eliminar el usuario&quot;, Alert.AlertType.ERROR);&#10;                    }&#10;                }&#10;            });&#10;        } else {&#10;            mostrarVentanaEmergente(&quot;Seleccione un usuario&quot;, &quot;Advertencia&quot;,&#10;                    &quot;Debe seleccionar un usuario de la tabla para eliminarlo&quot;, Alert.AlertType.WARNING);&#10;        }&#10;    }&#10;&#10;    private void limpiarCampos() {&#10;        txtNombre.clear();&#10;        txtIdentificacion.clear();&#10;        txtEdad.clear();&#10;        txtCelular.clear();&#10;        comboBoxMembresia.setValue(null);&#10;    }&#10;&#10;    // Nuevo: validación para UsuarioDto&#10;    private boolean datosValidos(UsuarioDto usuario) {&#10;        return usuario != null &amp;&amp;&#10;                usuario.nombre() != null &amp;&amp; !usuario.nombre().isEmpty() &amp;&amp;&#10;                usuario.identificacion() != null &amp;&amp; !usuario.identificacion().isEmpty() &amp;&amp;&#10;                usuario.edad() != null &amp;&amp; !usuario.edad().isEmpty() &amp;&amp;&#10;                usuario.celular() != null &amp;&amp; !usuario.celular().isEmpty() &amp;&amp;&#10;                usuario.membresia() != null &amp;&amp; !usuario.membresia().isEmpty();&#10;    }&#10;&#10;&#10;    // Nuevo: crea UsuarioDto desde la vista&#10;    private UsuarioDto crearUsuarioDto() {&#10;        return new UsuarioDto(&#10;                txtNombre.getText(),&#10;                txtIdentificacion.getText(),&#10;                txtEdad.getText(),&#10;                txtCelular.getText(),&#10;                comboBoxMembresia.getValue()&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Muestra la información del usuario seleccionado en los campos&#10;     */&#10;    private void mostrarInformacionUsuario(Usuario usuarioSeleccionado) {&#10;        if (usuarioSeleccionado != null) {&#10;            txtNombre.setText(usuarioSeleccionado.getNombre());&#10;            txtIdentificacion.setText(usuarioSeleccionado.getIdentificacion());&#10;            txtEdad.setText(usuarioSeleccionado.getEdad());&#10;            txtCelular.setText(usuarioSeleccionado.getCelular());&#10;            comboBoxMembresia.setValue(usuarioSeleccionado.getMembresia());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra una ventana emergente con un mensaje&#10;     */&#10;    private void mostrarVentanaEmergente(String titulo, String header, String contenido, Alert.AlertType alertType) {&#10;        Alert alert = new Alert(alertType);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    /**&#10;     * Refresca la tabla con los datos actuales del modelo&#10;     */&#10;    public void refrescarTabla() {&#10;        obtenerUsuarios();&#10;        tableUsuario.refresh();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package gimnasiouq.gimnasiouq.viewcontroller;&#10;&#10;import java.net.URL;&#10;import java.util.ResourceBundle;&#10;&#10;import gimnasiouq.gimnasiouq.factory.ModelFactory;&#10;import gimnasiouq.gimnasiouq.mapping.dto.UsuarioDto;&#10;import gimnasiouq.gimnasiouq.model.Usuario;&#10;import gimnasiouq.gimnasiouq.controller.UsuarioController;&#10;import javafx.beans.property.SimpleStringProperty;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;&#10;public class AdministradorUsuariosViewController {&#10;&#10;    AdministradorViewController administradorViewController;&#10;    ObservableList&lt;Usuario&gt; listaUsuarios = FXCollections.observableArrayList();&#10;    Usuario usuarioSeleccionado;&#10;&#10;    // Controller que delega la lógica de negocio&#10;    private UsuarioController usuarioController;&#10;&#10;    @FXML&#10;    private ResourceBundle resources;&#10;&#10;    @FXML&#10;    private URL location;&#10;&#10;    @FXML&#10;    private Button btnActualizar;&#10;&#10;    @FXML&#10;    private Button btnAgregar;&#10;&#10;    @FXML&#10;    private Button btnEliminar;&#10;&#10;    @FXML&#10;    private Button btnNuevo;&#10;&#10;    @FXML&#10;    private TableView&lt;Usuario&gt; tableUsuario;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcCelular;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcEdad;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcIdentificacion;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcMembresia;&#10;&#10;    @FXML&#10;    private TableColumn&lt;Usuario, String&gt; tcNombre;&#10;&#10;    @FXML&#10;    private TextField txtCelular;&#10;&#10;    @FXML&#10;    private TextField txtEdad;&#10;&#10;    @FXML&#10;    private TextField txtIdentificacion;&#10;&#10;    @FXML&#10;    private ComboBox&lt;String&gt; comboBoxMembresia;&#10;&#10;    @FXML&#10;    private TextField txtNombre;&#10;&#10;    @FXML&#10;    void onActualizar(ActionEvent event) {&#10;        actualizarUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void onAgregar(ActionEvent event) {&#10;        agregarUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void onEliminar(ActionEvent event) {&#10;        eliminarUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void onNuevo(ActionEvent event) {&#10;        nuevoUsuario();&#10;    }&#10;&#10;    @FXML&#10;    void initialize() {&#10;        initView();&#10;        comboBoxMembresia.getItems().addAll(&quot;Basica&quot;, &quot;Premium&quot;, &quot;VIP&quot;);&#10;    }&#10;&#10;    private void initView() {&#10;        initDataBinding();&#10;        obtenerUsuarios();&#10;        tableUsuario.getItems().clear();&#10;        tableUsuario.setItems(listaUsuarios);&#10;        listenerSelection();&#10;    }&#10;&#10;    private void obtenerUsuarios() {&#10;        listaUsuarios.clear();&#10;        listaUsuarios.addAll(ModelFactory.getInstance().obtenerUsuarios());&#10;    }&#10;&#10;    private void initDataBinding() {&#10;        tcNombre.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getNombre()));&#10;        tcIdentificacion.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getIdentificacion()));&#10;        tcEdad.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getEdad()));&#10;        tcCelular.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getCelular()));&#10;        tcMembresia.setCellValueFactory(cellData -&gt; new SimpleStringProperty(cellData.getValue().getMembresia()));&#10;    }&#10;&#10;    private void listenerSelection() {&#10;        tableUsuario.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newSelection) -&gt; {&#10;            usuarioSeleccionado = newSelection;&#10;            mostrarInformacionUsuario(usuarioSeleccionado);&#10;        });&#10;    }&#10;&#10;    private void nuevoUsuario() {&#10;        limpiarCampos();&#10;        usuarioSeleccionado = null;&#10;        tableUsuario.getSelectionModel().clearSelection();&#10;    }&#10;&#10;    private void agregarUsuario() {&#10;        UsuarioDto usuarioDto = crearUsuarioDto();&#10;&#10;        if (datosValidos(usuarioDto)) {&#10;            if (usuarioController == null) {&#10;                usuarioController = new UsuarioController();&#10;            }&#10;&#10;            if (usuarioController.agregarUsuario(usuarioDto)) {&#10;                // Agregamos el nuevo usuario a la lista observable&#10;                listaUsuarios.add(new Usuario(&#10;                        usuarioDto.nombre(),&#10;                        usuarioDto.identificacion(),&#10;                        usuarioDto.edad(),&#10;                        usuarioDto.celular(),&#10;                        usuarioDto.membresia()&#10;                ));&#10;&#10;                limpiarCampos();&#10;&#10;                // Notificar al controlador padre para que actualice otras vistas&#10;                if (administradorViewController != null) {&#10;                    administradorViewController.notificarActualizacion();&#10;                }&#10;&#10;                mostrarVentanaEmergente(&quot;Usuario agregado&quot;, &quot;Éxito&quot;,&#10;                        &quot;El usuario se agregó correctamente&quot;, Alert.AlertType.INFORMATION);&#10;            } else {&#10;                mostrarVentanaEmergente(&quot;Usuario no agregado&quot;, &quot;Error&quot;,&#10;                        &quot;El usuario ya existe o los datos son inválidos&quot;, Alert.AlertType.ERROR);&#10;            }&#10;        } else {&#10;            mostrarVentanaEmergente(&quot;Datos incompletos&quot;, &quot;Error&quot;,&#10;                    &quot;Por favor complete todos los campos&quot;, Alert.AlertType.ERROR);&#10;        }&#10;    }&#10;&#10;    private void actualizarUsuario() {&#10;        if (usuarioSeleccionado != null) {&#10;            UsuarioDto usuarioActualizado = crearUsuarioDto();&#10;&#10;            if (datosValidos(usuarioActualizado)) {&#10;                // Usamos la identificación del usuario seleccionado como clave&#10;                if (usuarioController == null) {&#10;                    usuarioController = new UsuarioController();&#10;                }&#10;&#10;                if (usuarioController.actualizarUsuario(usuarioSeleccionado.getIdentificacion(), usuarioActualizado)) {&#10;&#10;                    // Actualizamos la lista observable: reemplazamos el objeto Usuario en la lista&#10;                    int index = listaUsuarios.indexOf(usuarioSeleccionado);&#10;                    if (index &gt;= 0) {&#10;                        listaUsuarios.set(index, new Usuario(&#10;                                usuarioActualizado.nombre(),&#10;                                usuarioActualizado.identificacion(),&#10;                                usuarioActualizado.edad(),&#10;                                usuarioActualizado.celular(),&#10;                                usuarioActualizado.membresia()&#10;                        ));&#10;                    }&#10;&#10;                    tableUsuario.refresh();&#10;                    limpiarCampos();&#10;                    mostrarVentanaEmergente(&quot;Usuario actualizado&quot;, &quot;Éxito&quot;,&#10;                            &quot;El usuario se actualizó correctamente&quot;, Alert.AlertType.INFORMATION);&#10;                } else {&#10;                    mostrarVentanaEmergente(&quot;Usuario no actualizado&quot;, &quot;Error&quot;,&#10;                            &quot;No se pudo actualizar el usuario. Verifique que la nueva identificación no exista&quot;,&#10;                            Alert.AlertType.ERROR);&#10;                }&#10;            } else {&#10;                mostrarVentanaEmergente(&quot;Datos incompletos&quot;, &quot;Error&quot;,&#10;                        &quot;Por favor complete todos los campos&quot;, Alert.AlertType.ERROR);&#10;            }&#10;        } else {&#10;            mostrarVentanaEmergente(&quot;Seleccione un usuario&quot;, &quot;Advertencia&quot;,&#10;                    &quot;Debe seleccionar un usuario de la tabla para actualizarlo&quot;, Alert.AlertType.WARNING);&#10;        }&#10;    }&#10;&#10;    private void eliminarUsuario() {&#10;        if (usuarioSeleccionado != null) {&#10;            // Confirmación antes de eliminar&#10;            Alert confirmacion = new Alert(Alert.AlertType.CONFIRMATION);&#10;            confirmacion.setTitle(&quot;Confirmar eliminación&quot;);&#10;            confirmacion.setHeaderText(&quot;¿Está seguro?&quot;);&#10;            confirmacion.setContentText(&quot;¿Desea eliminar al usuario &quot; +&#10;                    usuarioSeleccionado.getNombre() + &quot; con identificación &quot; +&#10;                    usuarioSeleccionado.getIdentificacion() + &quot;?&quot;);&#10;&#10;            confirmacion.showAndWait().ifPresent(response -&gt; {&#10;                if (response == ButtonType.OK) {&#10;                    if (usuarioController == null) {&#10;                        usuarioController = new UsuarioController();&#10;                    }&#10;&#10;                    if (usuarioController.eliminarUsuario(usuarioSeleccionado.getIdentificacion())) {&#10;                        listaUsuarios.remove(usuarioSeleccionado);&#10;                        limpiarCampos();&#10;                        usuarioSeleccionado = null;&#10;                        mostrarVentanaEmergente(&quot;Usuario eliminado&quot;, &quot;Éxito&quot;,&#10;                                &quot;El usuario se eliminó correctamente&quot;, Alert.AlertType.INFORMATION);&#10;                    } else {&#10;                        mostrarVentanaEmergente(&quot;Usuario no eliminado&quot;, &quot;Error&quot;,&#10;                                &quot;No se pudo eliminar el usuario&quot;, Alert.AlertType.ERROR);&#10;                    }&#10;                }&#10;            });&#10;        } else {&#10;            mostrarVentanaEmergente(&quot;Seleccione un usuario&quot;, &quot;Advertencia&quot;,&#10;                    &quot;Debe seleccionar un usuario de la tabla para eliminarlo&quot;, Alert.AlertType.WARNING);&#10;        }&#10;    }&#10;&#10;    private void limpiarCampos() {&#10;        txtNombre.clear();&#10;        txtIdentificacion.clear();&#10;        txtEdad.clear();&#10;        txtCelular.clear();&#10;        comboBoxMembresia.setValue(null);&#10;    }&#10;&#10;    // Nuevo: validación para UsuarioDto&#10;    private boolean datosValidos(UsuarioDto usuario) {&#10;        return usuario != null &amp;&amp;&#10;                usuario.nombre() != null &amp;&amp; !usuario.nombre().isEmpty() &amp;&amp;&#10;                usuario.identificacion() != null &amp;&amp; !usuario.identificacion().isEmpty() &amp;&amp;&#10;                usuario.edad() != null &amp;&amp; !usuario.edad().isEmpty() &amp;&amp;&#10;                usuario.celular() != null &amp;&amp; !usuario.celular().isEmpty() &amp;&amp;&#10;                usuario.membresia() != null &amp;&amp; !usuario.membresia().isEmpty();&#10;    }&#10;&#10;&#10;    // Nuevo: crea UsuarioDto desde la vista&#10;    private UsuarioDto crearUsuarioDto() {&#10;        return new UsuarioDto(&#10;                txtNombre.getText(),&#10;                txtIdentificacion.getText(),&#10;                txtEdad.getText(),&#10;                txtCelular.getText(),&#10;                comboBoxMembresia.getValue()&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Muestra la información del usuario seleccionado en los campos&#10;     */&#10;    private void mostrarInformacionUsuario(Usuario usuarioSeleccionado) {&#10;        if (usuarioSeleccionado != null) {&#10;            txtNombre.setText(usuarioSeleccionado.getNombre());&#10;            txtIdentificacion.setText(usuarioSeleccionado.getIdentificacion());&#10;            txtEdad.setText(usuarioSeleccionado.getEdad());&#10;            txtCelular.setText(usuarioSeleccionado.getCelular());&#10;            comboBoxMembresia.setValue(usuarioSeleccionado.getMembresia());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Muestra una ventana emergente con un mensaje&#10;     */&#10;    private void mostrarVentanaEmergente(String titulo, String header, String contenido, Alert.AlertType alertType) {&#10;        Alert alert = new Alert(alertType);&#10;        alert.setTitle(titulo);&#10;        alert.setHeaderText(header);&#10;        alert.setContentText(contenido);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    /**&#10;     * Refresca la tabla con los datos actuales del modelo&#10;     */&#10;    public void refrescarTabla() {&#10;        obtenerUsuarios();&#10;        tableUsuario.refresh();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>